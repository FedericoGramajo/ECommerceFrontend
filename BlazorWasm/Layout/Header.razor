

<div class="header_section">
    <div class="container">
        <div class="containt_main">
            <div id="mySidenav" class="sidenav">
                <a href="javascript:void(0)" class="closebtn" onclick="closeNav()" style="color:#cca120">&times;</a>
                <div class="fw-bold text-center text-warning" style="font:Tahoma; font-size:20px">CATEGORIES</div>
                <hr style="height:5px; background:linear-gradient(to bottom, #cca120, gray)" class="text-light"/>
                <CategoryComponent />
                <hr style="height:5px; position:relative; top:60%; background:linear-gradient(to bottom, #cca120, gray)" class="text-light"/>
                <div class="fw-bold text-center text-warning" style="font:Tahoma; font-size:16px; position:relative; top:60%"> Version 1.0</div>
            </div>
            <span class="toggle_icon" onclick="openNav()"><img src="images/toggle-icon.png"></span>
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    All Category
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item" href="#">Action</a>
                    <a class="dropdown-item" href="#">Another action</a>
                    <a class="dropdown-item" href="#">Something else here</a>
                </div>
            </div>
            <div class="main">
                <!-- Another variation with a button -->
                <div class="input-group">
                    <div class="input-group bg-light text-dark">
                        <BlazoredTypeahead Placeholder="Search Products..." SearchMethod="SearchProducts" @bind-Value="SelectedProduct">
                            <SelectedTemplate>
                                @context.Name
                            </SelectedTemplate>
                            <ResultTemplate>
                                @context.Name
                            </ResultTemplate>
                            <NotFoundTemplate>
                                <span>No Products Found</span>
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                    </div>
                </div>
            </div>
            <div class="header_box">
                @*   <div class="lang_box ">
                    <a href="#" title="Language" class="nav-link" data-toggle="dropdown" aria-expanded="true">
                        <img src="images/flag-uk.png" alt="flag" class="mr-2 " title="United Kingdom"> English <i class="fa fa-angle-down ml-2" aria-hidden="true"></i>
                    </a>
                    <div class="dropdown-menu ">
                        <a href="#" class="dropdown-item">
                            <img src="images/flag-france.png" class="mr-2" alt="flag">
                            French
                        </a>
                    </div>
                </div> *@
                <div class="login_menu">
                    <a href="#" title="Acount" class="nav-link" data-toggle="dropdown" aria-expanded="true">
                        <i class="fa fa-user text-light" aria-hidden="true"></i> <span class="text-light">
                            <AuthorizeView>
                                <Authorized>@context.User.Claims.FirstOrDefault(c=>c.Type == ClaimTypes.Email)!.Value!</Authorized>
                                <NotAuthorized>ACCOUNT</NotAuthorized>
                            </AuthorizeView>
                        </span>
                    </a>
                    <div class="dropdown-menu">
                        <AuthorizeView>
                            <Authorized>
                                <div href="#" class="dropdown-item">
                                    <div class="hstack gap-1">
                                        <i class="fa fa-tasks"></i>
                                        <a href="/authentication/logout"> Logout</a>
                                    </div>
                                </div>                                
                            </Authorized>
                            <NotAuthorized>
                                <div href="#" class="dropdown-item">
                                    <div class="hstack gap-1">
                                        <i class="fa fa-tasks"></i>
                                        <a href="/authentication/login"> Login</a>
                                    </div>
                                </div>
                                <div href="#" class="dropdown-item">
                                    <div class="hstack gap-1">
                                        <i class="fa fa-tasks"></i>
                                        <a href="/authentication/register"> Register</a>
                                    </div>
                                </div>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
        IEnumerable<GetProduct> Products = [];
        private GetProduct _selectedProduct = new();
        public GetProduct SelectedProduct
        {
            get => _selectedProduct;
            set
            {
                if (_selectedProduct != null)
                {
                    _selectedProduct = value;
                    OnSelectedProductChanged();
                }
            }
        }
        private void OnSelectedProductChanged()
        {
            if (_selectedProduct == null) return;
            {
                NavManager.NavigateTo($"search-result/{_selectedProduct.Name}");
            }
        }
        protected override async Task OnInitializedAsync()
        {
            Products = await productService.GetAllAsync();
        }
        private async Task<IEnumerable<GetProduct>> SearchProducts(string searchText)
        {
            return await Task.FromResult(Products
                .Where(p => p.Name!.Contains(searchText, StringComparison.CurrentCultureIgnoreCase) 
                || p.Description!.Contains(searchText, StringComparison.CurrentCultureIgnoreCase))
                .ToList());
        }
}
